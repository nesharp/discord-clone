generator clien {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    url = env("POSTGRES_PRISMA_URL") // uses connection pooling

    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Profile {
    id        String    @id @default(uuid())
    userId    String    @unique
    name      String
    email     String    @db.Text()
    imageUrl  String    @db.Text()
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    serverId  String?
    server    Server[]
    member    Member[]
    Channel   Channel[]
}

model Server {
    id         String  @id @default(uuid())
    name       String
    imageUrl   String  @db.Text()
    inviteCode String  @unique
    profileId  String
    profile    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    members   Member[]
    channels  Channel[]

    @@index([profileId])
}

model Member {
    id        String     @id @default(uuid())
    role      MemberRole @default(GUEST)
    profileId String
    profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
    serverId  String
    server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt              DateTime        @default(now())
    updatedAt              DateTime        @updatedAt
    messages               Message[]
    conversationsInitiated Conversation[]  @relation("MemberOne")
    conversationsReceived  Conversation[]  @relation("MemberTwo")
    directMessage          DirectMessage[]

    @@index([profileId])
    @@index([serverId])
}

model Channel {
    id        String      @id @default(uuid())
    name      String
    type      ChannelType @default(TEXT)
    profileId String
    profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
    serverId  String
    server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    messages Message[]
}

model Message {
    id      String  @id @default(uuid())
    content String  @db.Text()
    fileUrl String? @db.Text()

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    channelId String
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([channelId])
    @@index([memberId])
}

model Conversation {
    id            String          @id @default(uuid())
    memberOneId   String
    memberOne     Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
    memberTwoId   String
    memberTwo     Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
    directMessage DirectMessage[]

    @@unique([memberOneId, memberTwoId])
    @@index([memberOneId])
    @@index([memberTwoId])
}

model DirectMessage {
    id             String       @id @default(uuid())
    content        String       @db.Text()
    fileUrl        String?      @db.Text()
    memberId       String
    member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    deleted Boolean @default(false)

    @@index([memberId])
    @@index([conversationId])
}

enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

enum ChannelType {
    TEXT
    AUDIO
    VIDEO
}
